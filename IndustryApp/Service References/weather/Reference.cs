//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IndustryApp.weather {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.cdyne.com/WeatherWS/", ConfigurationName="weather.WeatherSoap")]
    public interface WeatherSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ws.cdyne.com/WeatherWS/GetWeatherInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetWeatherInformation(IndustryApp.weather.GetWeatherInformationRequest request, System.AsyncCallback callback, object asyncState);
        
        IndustryApp.weather.GetWeatherInformationResponse EndGetWeatherInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ws.cdyne.com/WeatherWS/GetCityForecastByZIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetCityForecastByZIP(string ZIP, System.AsyncCallback callback, object asyncState);
        
        IndustryApp.weather.ForecastReturn EndGetCityForecastByZIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ws.cdyne.com/WeatherWS/GetCityWeatherByZIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetCityWeatherByZIP(string ZIP, System.AsyncCallback callback, object asyncState);
        
        IndustryApp.weather.WeatherReturn EndGetCityWeatherByZIP(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class WeatherDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private short weatherIDField;
        
        private string descriptionField;
        
        private string pictureURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public short WeatherID {
            get {
                return this.weatherIDField;
            }
            set {
                this.weatherIDField = value;
                this.RaisePropertyChanged("WeatherID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PictureURL {
            get {
                return this.pictureURLField;
            }
            set {
                this.pictureURLField = value;
                this.RaisePropertyChanged("PictureURL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class WeatherReturn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool successField;
        
        private string responseTextField;
        
        private string stateField;
        
        private string cityField;
        
        private string weatherStationCityField;
        
        private short weatherIDField;
        
        private string descriptionField;
        
        private string temperatureField;
        
        private string relativeHumidityField;
        
        private string windField;
        
        private string pressureField;
        
        private string visibilityField;
        
        private string windChillField;
        
        private string remarksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
                this.RaisePropertyChanged("Success");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
                this.RaisePropertyChanged("ResponseText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string WeatherStationCity {
            get {
                return this.weatherStationCityField;
            }
            set {
                this.weatherStationCityField = value;
                this.RaisePropertyChanged("WeatherStationCity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public short WeatherID {
            get {
                return this.weatherIDField;
            }
            set {
                this.weatherIDField = value;
                this.RaisePropertyChanged("WeatherID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Temperature {
            get {
                return this.temperatureField;
            }
            set {
                this.temperatureField = value;
                this.RaisePropertyChanged("Temperature");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string RelativeHumidity {
            get {
                return this.relativeHumidityField;
            }
            set {
                this.relativeHumidityField = value;
                this.RaisePropertyChanged("RelativeHumidity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string Wind {
            get {
                return this.windField;
            }
            set {
                this.windField = value;
                this.RaisePropertyChanged("Wind");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
                this.RaisePropertyChanged("Pressure");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string Visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
                this.RaisePropertyChanged("Visibility");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string WindChill {
            get {
                return this.windChillField;
            }
            set {
                this.windChillField = value;
                this.RaisePropertyChanged("WindChill");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
                this.RaisePropertyChanged("Remarks");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class POP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nighttimeField;
        
        private string daytimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Nighttime {
            get {
                return this.nighttimeField;
            }
            set {
                this.nighttimeField = value;
                this.RaisePropertyChanged("Nighttime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Daytime {
            get {
                return this.daytimeField;
            }
            set {
                this.daytimeField = value;
                this.RaisePropertyChanged("Daytime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class temp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string morningLowField;
        
        private string daytimeHighField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MorningLow {
            get {
                return this.morningLowField;
            }
            set {
                this.morningLowField = value;
                this.RaisePropertyChanged("MorningLow");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DaytimeHigh {
            get {
                return this.daytimeHighField;
            }
            set {
                this.daytimeHighField = value;
                this.RaisePropertyChanged("DaytimeHigh");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class Forecast : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime dateField;
        
        private short weatherIDField;
        
        private string desciptionField;
        
        private temp temperaturesField;
        
        private POP probabilityOfPrecipiationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public short WeatherID {
            get {
                return this.weatherIDField;
            }
            set {
                this.weatherIDField = value;
                this.RaisePropertyChanged("WeatherID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Desciption {
            get {
                return this.desciptionField;
            }
            set {
                this.desciptionField = value;
                this.RaisePropertyChanged("Desciption");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public temp Temperatures {
            get {
                return this.temperaturesField;
            }
            set {
                this.temperaturesField = value;
                this.RaisePropertyChanged("Temperatures");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public POP ProbabilityOfPrecipiation {
            get {
                return this.probabilityOfPrecipiationField;
            }
            set {
                this.probabilityOfPrecipiationField = value;
                this.RaisePropertyChanged("ProbabilityOfPrecipiation");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class ForecastReturn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool successField;
        
        private string responseTextField;
        
        private string stateField;
        
        private string cityField;
        
        private string weatherStationCityField;
        
        private Forecast[] forecastResultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
                this.RaisePropertyChanged("Success");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
                this.RaisePropertyChanged("ResponseText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string WeatherStationCity {
            get {
                return this.weatherStationCityField;
            }
            set {
                this.weatherStationCityField = value;
                this.RaisePropertyChanged("WeatherStationCity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public Forecast[] ForecastResult {
            get {
                return this.forecastResultField;
            }
            set {
                this.forecastResultField = value;
                this.RaisePropertyChanged("ForecastResult");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWeatherInformation", WrapperNamespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class GetWeatherInformationRequest {
        
        public GetWeatherInformationRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWeatherInformationResponse", WrapperNamespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class GetWeatherInformationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.cdyne.com/WeatherWS/", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public IndustryApp.weather.WeatherDescription[] GetWeatherInformationResult;
        
        public GetWeatherInformationResponse() {
        }
        
        public GetWeatherInformationResponse(IndustryApp.weather.WeatherDescription[] GetWeatherInformationResult) {
            this.GetWeatherInformationResult = GetWeatherInformationResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WeatherSoapChannel : IndustryApp.weather.WeatherSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWeatherInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IndustryApp.weather.WeatherDescription[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IndustryApp.weather.WeatherDescription[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityForecastByZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityForecastByZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IndustryApp.weather.ForecastReturn Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IndustryApp.weather.ForecastReturn)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityWeatherByZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityWeatherByZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IndustryApp.weather.WeatherReturn Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IndustryApp.weather.WeatherReturn)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherSoapClient : System.ServiceModel.ClientBase<IndustryApp.weather.WeatherSoap>, IndustryApp.weather.WeatherSoap {
        
        private BeginOperationDelegate onBeginGetWeatherInformationDelegate;
        
        private EndOperationDelegate onEndGetWeatherInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityForecastByZIPDelegate;
        
        private EndOperationDelegate onEndGetCityForecastByZIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityForecastByZIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityWeatherByZIPDelegate;
        
        private EndOperationDelegate onEndGetCityWeatherByZIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityWeatherByZIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WeatherSoapClient() : 
                base(WeatherSoapClient.GetDefaultBinding(), WeatherSoapClient.GetDefaultEndpointAddress()) {
        }
        
        public WeatherSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), WeatherSoapClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public WeatherSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public WeatherSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WeatherSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public WeatherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherInformationCompletedEventArgs> GetWeatherInformationCompleted;
        
        public event System.EventHandler<GetCityForecastByZIPCompletedEventArgs> GetCityForecastByZIPCompleted;
        
        public event System.EventHandler<GetCityWeatherByZIPCompletedEventArgs> GetCityWeatherByZIPCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndustryApp.weather.WeatherSoap.BeginGetWeatherInformation(IndustryApp.weather.GetWeatherInformationRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeatherInformation(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWeatherInformation(System.AsyncCallback callback, object asyncState) {
            IndustryApp.weather.GetWeatherInformationRequest inValue = new IndustryApp.weather.GetWeatherInformationRequest();
            return ((IndustryApp.weather.WeatherSoap)(this)).BeginGetWeatherInformation(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IndustryApp.weather.GetWeatherInformationResponse IndustryApp.weather.WeatherSoap.EndGetWeatherInformation(System.IAsyncResult result) {
            return base.Channel.EndGetWeatherInformation(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private IndustryApp.weather.WeatherDescription[] EndGetWeatherInformation(System.IAsyncResult result) {
            IndustryApp.weather.GetWeatherInformationResponse retVal = ((IndustryApp.weather.WeatherSoap)(this)).EndGetWeatherInformation(result);
            return retVal.GetWeatherInformationResult;
        }
        
        private System.IAsyncResult OnBeginGetWeatherInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetWeatherInformation(callback, asyncState);
        }
        
        private object[] OnEndGetWeatherInformation(System.IAsyncResult result) {
            IndustryApp.weather.WeatherDescription[] retVal = this.EndGetWeatherInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherInformationCompleted(object state) {
            if ((this.GetWeatherInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherInformationCompleted(this, new GetWeatherInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherInformationAsync() {
            this.GetWeatherInformationAsync(null);
        }
        
        public void GetWeatherInformationAsync(object userState) {
            if ((this.onBeginGetWeatherInformationDelegate == null)) {
                this.onBeginGetWeatherInformationDelegate = new BeginOperationDelegate(this.OnBeginGetWeatherInformation);
            }
            if ((this.onEndGetWeatherInformationDelegate == null)) {
                this.onEndGetWeatherInformationDelegate = new EndOperationDelegate(this.OnEndGetWeatherInformation);
            }
            if ((this.onGetWeatherInformationCompletedDelegate == null)) {
                this.onGetWeatherInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherInformationDelegate, null, this.onEndGetWeatherInformationDelegate, this.onGetWeatherInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndustryApp.weather.WeatherSoap.BeginGetCityForecastByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityForecastByZIP(ZIP, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IndustryApp.weather.ForecastReturn IndustryApp.weather.WeatherSoap.EndGetCityForecastByZIP(System.IAsyncResult result) {
            return base.Channel.EndGetCityForecastByZIP(result);
        }
        
        private System.IAsyncResult OnBeginGetCityForecastByZIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ZIP = ((string)(inValues[0]));
            return ((IndustryApp.weather.WeatherSoap)(this)).BeginGetCityForecastByZIP(ZIP, callback, asyncState);
        }
        
        private object[] OnEndGetCityForecastByZIP(System.IAsyncResult result) {
            IndustryApp.weather.ForecastReturn retVal = ((IndustryApp.weather.WeatherSoap)(this)).EndGetCityForecastByZIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityForecastByZIPCompleted(object state) {
            if ((this.GetCityForecastByZIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityForecastByZIPCompleted(this, new GetCityForecastByZIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityForecastByZIPAsync(string ZIP) {
            this.GetCityForecastByZIPAsync(ZIP, null);
        }
        
        public void GetCityForecastByZIPAsync(string ZIP, object userState) {
            if ((this.onBeginGetCityForecastByZIPDelegate == null)) {
                this.onBeginGetCityForecastByZIPDelegate = new BeginOperationDelegate(this.OnBeginGetCityForecastByZIP);
            }
            if ((this.onEndGetCityForecastByZIPDelegate == null)) {
                this.onEndGetCityForecastByZIPDelegate = new EndOperationDelegate(this.OnEndGetCityForecastByZIP);
            }
            if ((this.onGetCityForecastByZIPCompletedDelegate == null)) {
                this.onGetCityForecastByZIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityForecastByZIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityForecastByZIPDelegate, new object[] {
                        ZIP}, this.onEndGetCityForecastByZIPDelegate, this.onGetCityForecastByZIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndustryApp.weather.WeatherSoap.BeginGetCityWeatherByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityWeatherByZIP(ZIP, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IndustryApp.weather.WeatherReturn IndustryApp.weather.WeatherSoap.EndGetCityWeatherByZIP(System.IAsyncResult result) {
            return base.Channel.EndGetCityWeatherByZIP(result);
        }
        
        private System.IAsyncResult OnBeginGetCityWeatherByZIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ZIP = ((string)(inValues[0]));
            return ((IndustryApp.weather.WeatherSoap)(this)).BeginGetCityWeatherByZIP(ZIP, callback, asyncState);
        }
        
        private object[] OnEndGetCityWeatherByZIP(System.IAsyncResult result) {
            IndustryApp.weather.WeatherReturn retVal = ((IndustryApp.weather.WeatherSoap)(this)).EndGetCityWeatherByZIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityWeatherByZIPCompleted(object state) {
            if ((this.GetCityWeatherByZIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityWeatherByZIPCompleted(this, new GetCityWeatherByZIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityWeatherByZIPAsync(string ZIP) {
            this.GetCityWeatherByZIPAsync(ZIP, null);
        }
        
        public void GetCityWeatherByZIPAsync(string ZIP, object userState) {
            if ((this.onBeginGetCityWeatherByZIPDelegate == null)) {
                this.onBeginGetCityWeatherByZIPDelegate = new BeginOperationDelegate(this.OnBeginGetCityWeatherByZIP);
            }
            if ((this.onEndGetCityWeatherByZIPDelegate == null)) {
                this.onEndGetCityWeatherByZIPDelegate = new EndOperationDelegate(this.OnEndGetCityWeatherByZIP);
            }
            if ((this.onGetCityWeatherByZIPCompletedDelegate == null)) {
                this.onGetCityWeatherByZIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityWeatherByZIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityWeatherByZIPDelegate, new object[] {
                        ZIP}, this.onEndGetCityWeatherByZIPDelegate, this.onGetCityWeatherByZIPCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IndustryApp.weather.WeatherSoap CreateChannel() {
            return new WeatherSoapClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.WeatherSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.WeatherSoap)) {
                return new System.ServiceModel.EndpointAddress("http://wsf.cdyne.com/WeatherWS/Weather.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return WeatherSoapClient.GetBindingForEndpoint(EndpointConfiguration.WeatherSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return WeatherSoapClient.GetEndpointAddress(EndpointConfiguration.WeatherSoap);
        }
        
        private class WeatherSoapClientChannel : ChannelBase<IndustryApp.weather.WeatherSoap>, IndustryApp.weather.WeatherSoap {
            
            public WeatherSoapClientChannel(System.ServiceModel.ClientBase<IndustryApp.weather.WeatherSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeatherInformation(IndustryApp.weather.GetWeatherInformationRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWeatherInformation", _args, callback, asyncState);
                return _result;
            }
            
            public IndustryApp.weather.GetWeatherInformationResponse EndGetWeatherInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                IndustryApp.weather.GetWeatherInformationResponse _result = ((IndustryApp.weather.GetWeatherInformationResponse)(base.EndInvoke("GetWeatherInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCityForecastByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ZIP;
                System.IAsyncResult _result = base.BeginInvoke("GetCityForecastByZIP", _args, callback, asyncState);
                return _result;
            }
            
            public IndustryApp.weather.ForecastReturn EndGetCityForecastByZIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                IndustryApp.weather.ForecastReturn _result = ((IndustryApp.weather.ForecastReturn)(base.EndInvoke("GetCityForecastByZIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCityWeatherByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ZIP;
                System.IAsyncResult _result = base.BeginInvoke("GetCityWeatherByZIP", _args, callback, asyncState);
                return _result;
            }
            
            public IndustryApp.weather.WeatherReturn EndGetCityWeatherByZIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                IndustryApp.weather.WeatherReturn _result = ((IndustryApp.weather.WeatherReturn)(base.EndInvoke("GetCityWeatherByZIP", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            WeatherSoap,
        }
    }
}
